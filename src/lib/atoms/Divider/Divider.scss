// This component created partially because of missing many cases in design

.dividerTestHolder {
    display: inline-grid;
    grid-template-columns: 12fr;
    grid-auto-flow: row;
    gap: 1rem;
    width: 100%;
}

// TODO should remove dividerTestHolder

.divider {
    $this: &;

    display: inline-flex;
    gap: var(--guit-ref-spacing-xs);
    overflow: hidden;

    &::before,
    &::after {
        content: '';
        display: block;
        min-width: var(--guit-ref-sizing-m);
        min-height: 0;
        pointer-events: none;
    }

    &_horizontal {
        flex-direction: row;
        align-items: center;
        width: 100%;

        &#{ $this }:before,
        &#{ $this }:after {
            border-block-start: var(--guit-ref-border-width-thin) var(--guit-ref-border-style-solid);
        }
    }

    &_vertical {
        flex-direction: column;
        align-items: flex-start;
        height: 100%;

        &#{ $this }:before,
        &#{ $this }:after {
            border-inline-start: var(--guit-ref-border-width-thin) var(--guit-ref-border-style-solid);
        }
    }

    &_align {
        &_left {
            #{ $this }__element {
                order: -1;
            }
        }

        &_right {
            #{ $this }__element {
                order: 1;
            }
        }
    }

    &_color {
        &_default,
        &_strong {
            #{ $this }__labelText,
            #{ $this }__labelIcon {
                color: var(--guit-sem-color-foreground-neutral-1);
            }
        }

        &_default {
            &#{ $this }:before,
            &#{ $this }:after {
                border-inline-color: var(--guit-sem-color-border-neutral-2);
                border-block-color: var(--guit-sem-color-border-neutral-2);
            }
        }

        &_strong {
            &#{ $this }:before,
            &#{ $this }:after {
                border-inline-color: var(--guit-sem-color-border-neutral-3);
                border-block-color: var(--guit-sem-color-border-neutral-3);
            }
        }

        &_brand {
            &#{ $this }:before,
            &#{ $this }:after {
                border-inline-color: var(--guit-sem-color-border-brand);
                border-block-color: var(--guit-sem-color-border-brand);
            }

            #{ $this }__labelText,
            #{ $this }__labelIcon {
                color: var(--guit-sem-color-foreground-brand);
            }
        }

        &_inverse {
            &#{ $this }:before,
            &#{ $this }:after {
                border-inline-color: var(--guit-sem-color-border-inverse);
                border-block-color: var(--guit-sem-color-border-inverse);
            }

            #{ $this }__labelText,
            #{ $this }__labelIcon {
                color: var(--guit-sem-color-foreground-inverse);
            }
        }
    }

    &_withLabel {
        &_before {
            &#{ $this }::before {
                display: none;
            }
            &#{ $this }::after {
                flex: 1;
            }
        }

        &_center {
            &#{ $this }::before,
            &#{ $this }::after {
                flex: 1;
            }
        }

        &_after {
            &#{ $this }::before {
                flex: 1;
            }
            &#{ $this }::after {
                display: none;
            }
        }
    }

    &__label {
        display: flex;
        align-items: center;
        gap: var(--guit-ref-spacing-3xs);
        overflow: hidden;

        &Text {
            font-family: var(--guit-sem-font-body-medium-default-medium-font-family);
            font-size: var(--guit-sem-font-body-medium-default-medium-font-size);
            font-weight: var(--guit-sem-font-body-medium-default-medium-font-weight);
            line-height: var(--guit-sem-font-body-medium-default-medium-line-height);
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
        }

        &Icon {
            width: var(--guit-sem-sizing-width-s-nudge);
            height: var(--guit-sem-sizing-height-s-nudge);
        }
    }
}
