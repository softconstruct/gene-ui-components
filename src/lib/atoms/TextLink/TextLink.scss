.textLinkTestHolder {
    display: inline-grid;
    grid-template-rows: repeat(3, auto);
    grid-auto-flow: column;
    gap: 10px;
}

// todo
.textLink {
    $this: &;

    display: flex;
    align-items: center;
    gap: var(--guit-ref-spacing-3xs);
    user-select: none;
    cursor: pointer;

    &_state {
        &_default {
            #{ $this }__text {
                font-family: var(--guit-sem-font-body-medium-default-medium-font-family);
                font-size: var(--guit-sem-font-body-medium-default-medium-font-size);
                font-weight: var(--guit-sem-font-body-medium-default-medium-font-weight);
                line-height: var(--guit-sem-font-body-medium-default-medium-line-height);
            }
        }

        &_underline {
            #{ $this }__text {
                font-family: var(--guit-sem-font-body-medium-underline-medium-font-family);
                font-size: var(--guit-sem-font-body-medium-underline-medium-font-size);
                line-height: var(--guit-sem-font-body-medium-underline-medium-line-height);
                font-weight: var(--guit-sem-font-body-medium-underline-medium-font-weight);
                text-decoration: var(--guit-sem-font-body-medium-underline-medium-text-decoration);
            }
        }
    }

    &_color {
        &_primary {
            color: var(--guit-sem-color-foreground-brand);

            &:hover {
                color: var(--guit-sem-color-foreground-brand-hover);
            }

            &:active {
                color: var(--guit-sem-color-foreground-brand-pressed);
            }
        }

        &_secondary {
            color: var(--guit-sem-color-foreground-neutral-2);

            &:hover {
                color: var(--guit-sem-color-foreground-neutral-2-hover);
            }

            &:active {
                color: var(--guit-sem-color-foreground-neutral-2-pressed);
            }
        }

        &_inverse {
            color: var(--guit-sem-color-foreground-inverse);

            &:hover {
                color: var(--guit-sem-color-foreground-inverse-hover);
            }

            &:active {
                color: var(--guit-sem-color-foreground-inverse-pressed);
            }
        }
    }

    &__text {
        color: inherit;
        text-transform: capitalize;
    }

    &:focus-visible {
        outline-offset: var(--guit-ref-border-width-thin);
        outline: var(--guit-ref-border-width-thin) var(--guit-ref-border-style-solid)
            var(--guit-sem-color-border-focus-dark);
    }

    &_disabled {
        pointer-events: none;
        &:not(#{ $this }_color_inverse) {
            color: var(--guit-sem-color-foreground-disabled);
        }
        &#{ $this }_color_inverse {
            color: var(--guit-sem-color-foreground-inverse-disabled);
        }
    }
}
