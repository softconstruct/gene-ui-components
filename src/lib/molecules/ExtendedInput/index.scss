@import 'src/assets/styles/variables';

@mixin focus {
    &:not(.read-only) {
        &:focus-within {
            @content;
        }
    }
}

@mixin filled {
    &.filled {
        &:not(:focus-within) {
            @content;
        }
    }
}

$minimalSmall: '.input-holder.a-minimal.s-small';

.input-holder {
    position: relative;
    max-width: 100%;
    height: fit-content;
    transition: 300ms opacity;
    user-select: none;

    &.disabled {
        opacity: 0.5;
    }

    &.read-only {
        cursor: inherit;
        user-select: text;
    }

    &:not(.f-content-size) {
        width: 100%;
    }

    // Sizes
    --input-message-padding-side: #{rem(20)};
    --input-element-padding-side: #{rem(5)};
    --input-element-height: #{rem(36)};
    --textarea-height: #{rem(215)};
    --number-actions-holder-padding: 0 #{rem(5)};

    &.s-big {
        --input-element-height: #{rem(42)};
        --textarea-height: #{rem(520)};
    }

    &.s-small {
        --input-element-height: #{rem(32)};
        --textarea-height: #{rem(148)};
    }

    // Direction
    &.id-start {
        .validation-icon {
            margin-inline-end: #{-rem(5)};
        }
    }

    &.id-end {
        --direction: row-reverse;

        .validation-icon {
            margin-inline-start: #{-rem(5)};
        }
    }

    // Corner Radius
    &.cr-smooth-radius {
        --input-element-border-radius: #{rem(4)};
        --textarea-border-radius: #{rem(4)};
    }

    .end-add-on {
        height: var(--input-element-height);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 var(--input-structure-padding, #{rem(15)});
        font: 600 rem(14) / 1.5 $f;
        margin: rem(1) 0;
        margin-inline-start: var(--input-structure-padding, #{rem(15)});
        margin-inline-end: calc((var(--input-structure-padding, #{rem(15)}) * -1) + #{rem(1)});
        border-radius: 0 var(--input-element-border-radius, #{rem(42)}) var(--input-element-border-radius, #{rem(42)}) 0;
        transition: 300ms background, 300ms border-color, 300ms opacity;
    }

    // Appearance
    --swap-label-color: inherit;

    &.a-outline {
        &:not(.t-textarea) {
            .end-add-on {
                background: sc(b, 0.03);
                height: calc(var(--input-element-height) - #{rem(2)});
                border-inline-start: rem(1) solid var(--input-element-border-color, transparent);
            }
        }

        --input-element-border-color: #{sc(b, 0.2)};

        &.read-only {
            --input-element-border-color: #{sc(b, 0.05)};
        }
        @include filled {
            --input-element-border-color: #{sc(b, 0.3)};
        }
        @include focus {
            --input-element-border-color: #{c(hero)};
            --swap-label-color: #{c(hero)};
        }
    }

    &.a-minimal {
        --input-element-background: #{sc(b, 0.02)};

        &.read-only {
            --input-element-background: #{sc(b, 0.01)};
        }
        @include filled {
            --input-element-background: #{sc(b, 0.03)};
        }
        @include focus {
            --input-element-background: #{sc(b, 0.03)};
        }

        &.s-small {
            --input-message-padding-side: #{rem(7)};
            --input-element-background: #{sc(b, 0.03)};
            --input-element-padding-side: #{rem(3)};
            --number-actions-holder-padding: 0;
            --input-structure-padding: #{rem(4)};

            &.read-only {
                --input-element-background: #{sc(b, 0.01)};
            }
            @include filled {
                --input-element-background: #{sc(b, 0.03)};
            }
            @include focus {
                --input-element-background: transparent;
                --input-element-border-color: #{c(hero)};
                --swap-label-color: #{c(hero)};
            }
        }
    }

    &.a-light {
        @include focus {
            --input-element-background: #{sc(b, 0.05)};
        }
        @include hover {
            --input-element-background: #{sc(b, 0.05)};
        }

        &.popover-opened {
            --input-element-background: #{sc(b, 0.05)};
        }
    }

    &.error-color,
    &.success-color {
        --input-element-background: transparent !important;
    }

    &.error-color {
        --input-element-border-color: #{c(danger)} !important;
        @include focus {
            --swap-label-color: #{c(danger)} !important;
        }
    }

    &.success-color {
        --input-element-border-color: #{c(confirm)} !important;
        @include focus {
            --swap-label-color: #{c(confirm)} !important;
        }
    }

    &.t-textarea {
        .end-add-on {
            align-self: flex-end;
        }
    }
}

.input-structure {
    width: 100%;
    position: relative;
    display: flex;
    align-items: center;
    padding: 0 var(--input-structure-padding, #{rem(15)});
    flex-direction: var(--direction, row);

    > {
        * {
            flex-shrink: 0;

            &:not(label) {
                position: relative;
                @include zIndex(1);
                #{$minimalSmall} & {
                    margin: 0 rem(3);
                }

                &.bc-icon-clear {
                    transition: 400ms background, 400ms color;
                    border-radius: 100%;
                    @include hover {
                        background: sc(b, 0.03);
                        color: c(hero);
                    }
                }
            }
        }

        label {
            flex: auto;
            display: block;
            overflow: hidden;
            cursor: inherit;
        }
    }

    .icon {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: 300ms color, 300ms background;
        z-index: 10;
    }

    .icon-holder {
        z-index: 2;
        order: -1;

        &-disabled {
            pointer-events: none;
        }
    }
}

.input-element-back {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    background: var(--input-element-background, #{c(b)});
    border: rem(1) solid var(--input-element-border-color, transparent);
    border-radius: var(--input-element-border-radius, #{rem(42)});
    transition: 300ms background, 300ms border-color, 300ms opacity;

    .t-textarea & {
        border-radius: var(--textarea-border-radius, #{rem(10)});
    }

    .read-only & {
        &:empty {
            opacity: 0;
        }
    }
}

.fit-content-hack {
    opacity: 0;
    pointer-events: none;
    height: 0;
    overflow: hidden;
}

.input-element-relative {
    position: relative;
    width: 100%;
    @include zIndex(1);
}

.input-element {
    position: relative;
    width: 100%;
    height: var(--input-element-height);
    padding: 0 var(--input-element-padding-side);
    font: 600 rem(14) $f;
    color: sc(b, 0.75);
    resize: none;
    transition: 150ms opacity;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;

    &:-webkit-autofill {
        -webkit-text-fill-color: sc(b);
        background-clip: text;

        &::selection {
            -webkit-text-fill-color: c(hero, 1);
        }
    }

    &.hide {
        opacity: 0;
    }
    @include placeholder {
        font-weight: 600;
        font-size: rem(14);
        color: sc(b, 0.375);
        transition: 150ms color;
    }

    &.read-only {
        &:not(.textarea-element) {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    }
    @at-root {
        textarea#{&},
        .textarea-element {
            padding: rem(10) var(--input-element-padding-side);
            border: rem(1) solid transparent;
            overflow: auto;
            white-space: normal;
            text-overflow: unset;
            padding-right: 70px !important;
            cursor: auto;
            height: var(--textarea-height);

            &.read-only {
                height: auto;
            }

            &::-webkit-scrollbar {
                width: rem(16);
                height: rem(16);

                &-thumb {
                    background: sc(b, 0.05);
                    border-radius: rem(16);
                    border: rem(4) solid c(b);
                }
            }
        }
        div#{&} {
            display: flex;
            justify-content: flex-start;
            align-items: center;

            &:not([readonly]) {
                &.placeholder {
                    color: sc(b, 0.375);

                    &:focus {
                        color: sc(b, 0);
                    }
                }
            }
        }
    }

    &[readonly] {
        cursor: inherit;

        &::selection {
            background: transparent;
            color: inherit;
        }
    }

    &[type='date'],
    &[type='time'],
    &[type='datetime-local'] {
        line-height: var(--input-element-height);
    }
}

.input-fake-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    pointer-events: none;
    user-select: none;
    transition: 150ms opacity;
    font: 600 rem(14) / rem(18) $f;
    color: sc(b, 0.375);
    padding: 0 var(--input-element-padding-side);

    &.hide {
        opacity: 0;
    }
}

.input-swap-label {
    position: absolute;
    top: -rem(9);
    left: 0;
    width: fit-content;
    max-width: 100%;
    font: 600 rem(10) / rem(18) $f;
    padding: 0 var(--input-message-padding-side);
    display: flex;
    z-index: 5;

    .icon {
        font-size: rem(18);
        transition: none;
    }
}

.input-swap {
    overflow: hidden;
    max-width: 100%;
}

.input-swap-animate {
    padding: 0 rem(4);
    color: var(--swap-label-color);
    background: c(b);
    box-shadow: inset 0 -rem(8) 0 var(--input-element-background);
    transition: transform 300ms, opacity 300ms 100ms, color 300ms;
    max-width: 100%;
    display: flex;
    align-items: center;

    > * {
        + * {
            margin-inline-start: rem(5);
        }
    }

    &.hide {
        transform: translateY(100%);
        opacity: 0;
    }
}

.number-actions-holder {
    padding: var(--number-actions-holder-padding);

    > ul {
        width: rem(15);
        border-radius: rem(7);
        border: solid rem(1) sc(b, 0.1);
        font-size: rem(10);
        color: inherit;
        background: c(b);

        > li {
            cursor: pointer;
            transition: 300ms color, 300ms background, 300ms opacity;

            &:first-child {
                border-radius: rem(7) rem(7) 0 0;
            }

            &:last-child {
                border-radius: 0 0 rem(7) rem(7);
            }

            &.disabled {
                opacity: 0.5;
                pointer-events: none;
            }
            @include hover {
                background: sc(b, 0.03);
                color: c(hero);
            }
        }
    }
}
@include information-message;
@include input-description;

.input-title {
    max-width: 100%;
    padding: 0 var(--input-message-padding-side);
    opacity: 0.5;
    margin: 0 0 rem(4);
    display: flex;
    align-items: center;
    cursor: default;
    font: 600 rem(14) / rem(20) $f;

    > * {
        + * {
            margin-inline-start: rem(5);
        }
    }
}
