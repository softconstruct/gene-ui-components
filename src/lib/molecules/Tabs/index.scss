@import 'src/assets/styles/variables';

$el: '> li';
$selector: '.tabs-holder';
$selectorTabs: '.tabs-head > .tabs-wrapper';
#{$selector} {
    width: 100%;
    display: flex;
    align-items: flex-start;

    &.reversed {
        flex-direction: row-reverse;
    }

    &.horizontal {
        flex-direction: column;
    }
}

.tabs-head {
    flex-shrink: 0;
    display: flex;
    user-select: none;
    #{$selector}.horizontal > & {
        width: 100%;
    }

    > .tabs-wrapper {
        flex: auto;
    }

    > .tabs-actions {
        flex-shrink: 0;
        display: flex;
        align-items: center;
        box-shadow: inset 0 -rem(1) 0 0 sc(b, 0.06);
        color: c(hero);

        > * {
            margin-inline-end: rem(20);
        }
    }
}

.tabs-wrapper {
    #{$selector}.horizontal > .tabs-head > & {
        overflow-x: auto;
        width: 100%;

        &::-webkit-scrollbar {
            width: 0;
            height: 0;
            display: none;
        }

        > .tabs-content {
            &.equal-tabs,
            &.type-basic {
                min-width: 100%;
            }
        }
    }
}

.tabs-content {
    vertical-align: top;
    display: inline-flex;
    text-align: center;
    font-weight: 600;
    line-height: rem(42);
    #{$selector}.vertical > .tabs-head > .tabs-wrapper > & {
        flex-direction: column;
        text-align: start;

        .tab-icon {
            display: none;
        }
    }
    #{$el} {
        padding: 0 rem(20);
        cursor: pointer;
        transition: color 300ms, box-shadow 300ms, border-color 300ms, background-color, 300ms;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;

        .tab-icon {
            flex-shrink: 0;
            margin-inline-start: -rem(4);
            margin-inline-end: rem(14);
        }
        #{$selector}.vertical > #{$selectorTabs} > & {
            @include rtl(padding, (0 rem(30) 0 rem(20)), (0 rem(20) 0 rem(30)));

            justify-content: flex-start;
        }
        @at-root {
            #{$selector}.vertical:not(.reversed) > #{$selectorTabs} > .type-basic#{&} {
                justify-content: flex-end;
            }
        }
        #{$selector}.reversed > #{$selectorTabs} > & {
            @include rtl(padding, (0 rem(20) 0 rem(30)), (0 rem(30) 0 rem(20)));
        }

        &.disabled {
            opacity: 0.5;
        }

        &.disabled,
        &.active {
            pointer-events: none;
        }

        .tab-close-button {
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            width: rem(16);
            height: rem(16);
            background: sc(b, 0.07);
            border-radius: 100%;
            pointer-events: auto;
            margin-inline-start: rem(8);
            margin-inline-end: -rem(16);
            transition: 300ms color, 300ms background-color;
            color: sc(b);

            .icon {
                font-size: rem(12);
            }
            @include hover {
                background: c(hero);
                color: sc(hero);
            }
        }
    }

    &.active {
        .tab-close-button {
            background: c(hero, 0.1);
            color: c(hero);
            @include hover {
                background: c(hero);
                color: sc(hero);
            }
        }
    }

    &.equal-tabs {
        #{$el} {
            flex: 1;
            min-width: rem(120);
            #{$selector}.vertical > #{$selectorTabs} > & {
                width: rem(130);
            }
        }

        &.type-text {
            #{$el} {
                #{$selector}.vertical > #{$selectorTabs} > & {
                    width: rem(120);
                }
            }
        }
    }

    &.type- {
        &basic {
            box-shadow: inset 0 -rem(1) 0 0 sc(b, 0.06);
            line-height: rem(46);
            padding: 0 rem(20);
            #{$selector}.vertical > #{$selectorTabs} > & {
                padding: rem(20) 0;
                @include rtl(box-shadow, (inset -rem(1) 0 0 sc(b, 0.06)), (inset rem(1) 0 0 sc(b, 0.06)));

                text-align: end;
            }
            #{$selector}.reversed > #{$selectorTabs} > & {
                @include rtl(box-shadow, (inset rem(1) 0 0 sc(b, 0.06)), (inset -rem(1) 0 0 sc(b, 0.06)));

                text-align: start;
            }
            #{$el} {
                box-shadow: inset 0 0 0 c(hero);
                flex: inherit;

                &.active {
                    box-shadow: inset 0 -rem(4) 0 0 c(hero);
                    #{$selector}.vertical > #{$selectorTabs} > & {
                        @include rtl(box-shadow, (inset -rem(3) 0 0 c(hero)), (inset rem(3) 0 0 c(hero)));
                    }
                    #{$selector}.reversed > #{$selectorTabs} > & {
                        @include rtl(box-shadow, (inset rem(3) 0 0 c(hero)), (inset -rem(3) 0 0 c(hero)));
                    }
                }
            }
        }

        &box {
            #{$el} {
                border-radius: rem(10) rem(10) 0 0;
                border: rem(1) solid transparent;
                line-height: rem(41);
                .tabs-holder:not(.vertical) > #{$selectorTabs} > & {
                    + * {
                        @include rtl(margin, 0 0 0 rem(2), 0 rem(2) 0 0);
                    }
                }
                #{$selector}.vertical > #{$selectorTabs} > & {
                    @include rtl(border-radius, (rem(10) 0 0 rem(10)), (0 rem(10) rem(10) 0));

                    + * {
                        margin: rem(2) 0 0;
                    }
                }
                #{$selector}.vertical.reversed > #{$selectorTabs} > & {
                    @include rtl(border-radius, (0 rem(10) rem(10) 0), (rem(10) 0 0 rem(10)));
                }
                @include hover-active {
                    border-color: sc(b, 0.1);
                }
                @include hover {
                    #{$selector}.vertical:not(.reversed) > #{$selectorTabs} > & {
                        @include rtlp(border-right-color, border-left-color, transparent);
                    }
                    #{$selector}.vertical.reversed > #{$selectorTabs} > & {
                        @include rtlp(border-left-color, border-right-color, transparent);
                    }
                }

                &.active {
                    #{$selector}:not(.vertical) > #{$selectorTabs} > & {
                        border-bottom-color: c(b);
                    }
                    #{$selector}.vertical:not(.reversed) > #{$selectorTabs} > & {
                        @include rtls(border, c(b), right, color);
                    }
                    #{$selector}.reversed.vertical > #{$selectorTabs} > & {
                        @include rtls(border, c(b), left, color);
                    }
                }
            }
        }

        &button {
            box-shadow: inset 0 0 0 rem(1) sc(b, 0.1);

            &:not(.equal-tabs) {
                #{$el} {
                    #{$selector}.vertical > #{$selectorTabs} > & {
                        padding: 0 rem(20);
                    }
                }
            }
            #{$el} {
                box-shadow: inset 0 0 0 0 c(hero);

                &.active {
                    box-shadow: inset 0 0 0 rem(1) c(hero);
                }
            }
        }

        &text {
            &.equal-tabs {
                #{$el} {
                    min-width: rem(100);
                    #{$selector}.vertical > #{$selectorTabs} > & {
                        min-width: rem(120);
                    }
                }
            }
            #{$el} {
                padding: 0 rem(15);
                line-height: rem(28);
                #{$selector}.vertical > #{$selectorTabs} > & {
                    padding: 0 rem(20);

                    + * {
                        margin: rem(10) 0 0;
                    }
                }

                &.active {
                    background: c(hero);
                    color: sc(hero);
                }
            }
        }

        &box,
        &button {
            #{$el} {
                &.active {
                    color: c(hero);
                }
            }
        }

        &button,
        &text {
            &,
            #{$el} {
                border-radius: rem(20);
            }
            #{$el} {
                &:not(.active) {
                    @include hover {
                        color: c(hero);
                    }
                }
            }
        }
    }
}

.tabs-content-holder {
    width: 100%;
    #{$selector}.vertical > & {
        flex: auto;
    }

    &.c-type-box {
        border: solid rem(1) sc(b, 0.1);
        border-radius: 0 0 rem(10) rem(10);
        margin: -rem(1) 0 0;
        align-self: stretch;
        #{$selector}.vertical > & {
            border-radius: rem(10);
        }
        #{$selector}.vertical:not(.reversed) > & {
            @include rtl(margin, 0 0 0 -rem(1), 0 -rem(1) 0 0);
            @include rtl(border-radius, 0 rem(10) rem(10) 0, rem(10) 0 0 rem(10));
        }
        #{$selector}.vertical.reversed > & {
            @include rtl(margin, 0 -rem(1) 0 0, 0 0 0 -rem(1));
            @include rtl(border-radius, rem(10) 0 0 rem(10), 0 rem(10) rem(10) 0);
        }
    }
}

.external-link {
    display: flex;
    align-items: center;
    font-weight: 600;

    > * {
        + * {
            margin-inline-start: rem(2);
        }
    }
}
