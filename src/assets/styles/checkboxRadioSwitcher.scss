@import 'variables';
@include information-message;
@include input-description;

$selector: '.crs-holder';

.crs-holder {
    display: inline-flex;
    flex-direction: column;
    max-width: 100%;
    align-items: flex-start;
    user-select: none;
    font: 600 rem(14) / rem(18) $f;
    transition: 300ms opacity;

    &.disabled {
        opacity: 0.5;
        pointer-events: none;
    }

    &.read-only .label-holder div label {
        cursor: default;
    }

    &.read-only:active {
        pointer-events: none;
    }

    .label-holder {
        max-width: 100%;
        display: inline-grid;
        vertical-align: top;
        grid-template-columns: auto 1fr;
        align-items: center;
        grid-row-gap: rem(8);

        &.has-label {
            grid-column-gap: var(--crs-grid-column-gap, #{rem(10)});
        }
        @at-root {
            .lp-top#{&},
            .lp-bottom#{&} {
                grid-template-columns: auto;
                grid-template-rows: auto auto;
            }
            .lp-bottom#{&},
            .lp-right#{&} {
                .crs-component {
                    order: 0;
                }

                .crs-label {
                    order: 1;
                }
            }
            .la-start#{&} {
                .crs-item {
                    text-align: start;
                    justify-content: flex-start;
                    align-items: flex-start;
                }
            }
            .la-center#{&} {
                .crs-item {
                    text-align: center;
                    justify-content: center;
                    align-items: center;
                }
            }
            .la-end#{&} {
                .crs-item {
                    text-align: end;
                    justify-content: flex-end;
                    align-items: flex-end;
                }
            }
        }
    }

    &.la-start {
        align-items: flex-start;
    }

    &.la-center {
        align-items: center;
    }

    &.la-end {
        align-items: flex-end;
    }

    &.lp-left {
        align-items: flex-end;
    }

    .popover-content & {
        .label-holder {
            width: 100%;
        }
    }
    @include mobile($popoverClassName) {
        width: 100%;
    }
}

.crs-component {
    position: relative;

    input {
        position: absolute;
        top: 0;
        left: 0;
        pointer-events: none;
        opacity: 0;
    }
}

.crs-label {
    overflow: hidden;

    label {
        display: block;
        cursor: pointer;
    }
}

.crs-item {
    display: flex;
}

.cr-element {
    cursor: pointer;

    --size: #{rem(16)};

    width: var(--size);
    height: var(--size);
    border: rem(1) solid sc(b, 0.45);
    position: relative;
    transition: 400ms color, 400ms border-color, 400ms background, 400ms width, 400ms height;
    color: sc(hero);
    display: block;
    background: c(b);

    &::before,
    &::after {
        display: flex;
        justify-content: center;
        align-items: center;
        transition: 400ms transform, 400ms background;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        transform: scale(0);
    }
    @media (hover: hover) {
        .crs-label:hover ~ .crs-component &,
        &:hover,
        label:hover &,
        .crs-external-hover:hover &,
        .crs-external-active:active &,
        .crs-holder:focus-within & {
            border-color: c(hero);
        }
    }

    &.active::before {
        transform: scale(1);
    }

    &.checkbox {
        border-radius: rem(3);

        &::before {
            content: '\e911';
        }

        &::after {
            content: '\e913';
        }

        &::before,
        &::after {
            font: calc(var(--size) - #{rem(2)}) / 1 'betcore';
        }

        &.indeterminate,
        &.active {
            border-color: c(hero);
            background: c(hero);
        }

        &.indeterminate::after {
            transform: scale(1);
        }
        #{$selector}.read-only & {
            border-color: transparent;
            background: none;
            color: c(hero);

            &.active::before {
                transform: scale(1.4);
            }

            &:not(.active, .indeterminate) {
                color: sc(b, 0.38);

                &::after {
                    content: '\e916';
                    transform: scale(1.3);
                }
            }
        }
    }

    &.s-big {
        --size: #{rem(20)};
    }

    &.radio {
        border-radius: 100%;

        .view-normal & {
            --size: 12px;

            &::before {
                --gap: 2px;
            }
        }

        .view-small & {
            --size: 10px;

            &::before {
                --gap: 2px;
            }
        }

        &::before {
            content: '';

            --gap: #{rem(3)};

            top: var(--gap);
            left: var(--gap);
            right: var(--gap);
            bottom: var(--gap);
            background: c(hero);
            border-radius: 100%;
        }

        &.active {
            border-color: c(hero);
        }
        #{$selector}.read-only & {
            border-color: transparent;
            background: sc(b, 0.45);

            &.active {
                background: c(hero);

                &::before {
                    background: sc(hero);
                }
            }
        }
    }

    &:not(:focus-within) &.error-color {
        border-color: c(danger) !important;
    }
}

.cha-ra-group {
    display: flex;
    flex-wrap: wrap;
    width: 100%;

    .crs-holder {
        padding: rem(20);
    }

    &.t-tab {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        width: auto;
        max-width: 100%;
        border-radius: rem(22);
        box-shadow: inset 0 0 0 rem(1) sc(b, 0.1);

        .crs-holder {
            padding: 0;

            .label-holder {
                display: flex;
                position: relative;
            }

            .crs-label {
                transition: 400ms color;

                label {
                    min-width: rem(100);
                    padding: 0 rem(20);
                    font: 600 rem(14) / rem(42) $f;
                }
            }

            .crs-component {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: rem(1) solid c(hero, 0);
                border-radius: rem(42);
                pointer-events: none;
                transition: 400ms border-color;

                label {
                    opacity: 0;
                }
            }

            &.input-active {
                .crs-label {
                    color: c(hero);
                }

                .crs-component {
                    border-color: c(hero);
                }
            }
        }
    }
}
